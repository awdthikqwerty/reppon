from telethon.tl import functions, types
from telethon import utils
from telethon.errors import ChatAdminRequiredError
from telethon.tl.functions.messages import ImportChatInviteRequest
from asyncio import sleep
import re

# Переменные для хранения данных
chats = []
posts = []


# Команда для добавления чата в список рассылки
async def add_chat(client, message):
    try:
        chat_link = message.text.split(' ')[1]
        chat = await client(ImportChatInviteRequest(chat_link))
        chats.append(chat.id)
        await message.edit(f"Чат {chat_link} добавлен для рассылки.")
    except Exception as e:
        await message.edit(f"Ошибка: {str(e)}")


# Команда для удаления чата из списка рассылки
async def del_chat(client, message):
    try:
        chat_link = message.text.split(' ')[1]
        chat = await client(ImportChatInviteRequest(chat_link))
        chats.remove(chat.id)
        await message.edit(f"Чат {chat_link} удален из списка рассылки.")
    except Exception as e:
        await message.edit(f"Ошибка: {str(e)}")


# Команда для отображения списка чатов
async def list_chat(client, message):
    chat_list = []
    for chat_id in chats:
        try:
            chat = await client.get_entity(chat_id)
            chat_list.append(f"{chat.title} ({chat.id})")
        except Exception as e:
            print(f"Ошибка при получении информации о чате {chat_id}: {str(e)}")

    chat_list_str = '\n'.join(chat_list) if chat_list else "Список чатов пуст."
    await message.edit(f"Список чатов для рассылки:\n{chat_list_str}")


# Команда для отображения списка текстов
async def list_post(client, message):
    post_list_str = '\n'.join([f"{index + 1}. {post}" for index, post in enumerate(posts)]) if posts else "Список текстов пуст."
    await message.edit(f"Список текстов для рассылки:\n{post_list_str}")


# Команда для добавления текста в список рассылки
async def add_post(client, message):
    try:
        text = message.text.split(' ', 1)[1]
        posts.append(text)
        await message.edit(f"Текст добавлен в список рассылки.")
    except Exception as e:
        await message.edit(f"Ошибка: {str(e)}")


# Команда для проведения рассылки
async def post(client, message):
    try:
        args = message.text.split(' ')[1:]
        post_index = int(args[0]) - 1
        count = int(args[1])
        delay = int(args[2])

        for chat_id in chats:
            try:
                await client.send_message(chat_id, posts[post_index])
                await sleep(delay)
            except Exception as e:
                print(f"Ошибка при отправке сообщения в чат {chat_id}: {str(e)}")

        await message.edit(f"Рассылка завершена.")
    except Exception as e:
        await message.edit(f"Ошибка: {str(e)}")


# Обработчик команд
async def handle_commands(client, message):
    if message.text.startswith('.add_chat'):
        await add_chat(client, message)
    elif message.text.startswith('.del_chat'):
        await del_chat(client, message)
    elif message.text.startswith('.list_chat'):
        await list_chat(client, message)
    elif message.text.startswith('.list_post'):
        await list_post(client, message)
    elif message.text.startswith('.add_post'):
        await add_post(client, message)
    elif message.text.startswith('.post'):
        await post(client, message)


# Ваш код инициализации бота здесь

# Пример использования обработчика команд
async def example_usage():
    # Предполагается, что у вас уже есть инициализированный клиент
    # Замените 'client' и 'message' на ваш клиент и сообщение
    await handle_commands(client, message)
