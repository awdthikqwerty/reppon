import asyncio
from telethon import functions, types

@loader.tds
class ChannelMod(loader.Module):
    """
    Управление чатами и рассылка сообщений.
    """

    async def add_channel(self, chat_link):
        try:
            chat = await self.client.get_entity(chat_link)
            if isinstance(chat, types.Channel):
                channels = self.db.get("ChannelMod", "channels", [])
                if chat.id not in channels:
                    channels.append(chat.id)
                    self.db.set("ChannelMod", "channels", channels)
                    return True, f"Канал {chat.title} успешно добавлен."
                else:
                    return False, f"Канал {chat.title} уже есть в списке."
            else:
                return False, "Неверная ссылка на канал."
        except Exception as e:
            return False, str(e)

    async def list_channels(self):
        channels = self.db.get("ChannelMod", "channels", [])
        if channels:
            return "\n".join([f"- {await self.client.get_entity(channel)}" for channel in channels])
        else:
            return "Пока что не добавлено ни одного канала."

    async def remove_channel(self, chat_link):
        try:
            chat = await self.client.get_entity(chat_link)
            if isinstance(chat, types.Channel):
                channels = self.db.get("ChannelMod", "channels", [])
                if chat.id in channels:
                    channels.remove(chat.id)
                    self.db.set("ChannelMod", "channels", channels)
                    return True, f"Канал {chat.title} успешно удален."
                else:
                    return False, f"Канал {chat.title} не найден в списке."
            else:
                return False, "Неверная ссылка на канал."
        except Exception as e:
            return False, str(e)

    async def broadcast_message(self, message, count, delay):
        channels = self.db.get("ChannelMod", "channels", [])
        for channel_id in channels[:count]:
            await asyncio.sleep(delay)
            await self.client.send_message(channel_id, message)

    async def new_post_cmd(self, message):
        """
        Использование: .newpost <количество> <текст> <задержка>
        Отправляет новое сообщение в добавленные каналы.
        """
        args = utils.get_args(message)
        if len(args) != 3:
            return await utils.answer(message, "Неверное количество аргументов.")

        count, text, delay = map(int, args)
        await self.broadcast_message(text, count, delay)
        return await utils.answer(message, "Рассылка завершена.")

    async def channel_cmd(self, message):
        """
        Использование: .channel <ссылка на чат>
        Добавляет новый канал в список.
        """
        chat_link = utils.get_args_raw(message)
        success, result = await self.add_channel(chat_link)
        return await utils.answer(message, result) if success else await utils.answer(message, f"Ошибка: {result}")

    async def listchannel_cmd(self, message):
        """
        Использование: .listchannel
        Показывает список всех добавленных каналов.
        """
        channels_list = await self.list_channels()
        return await utils.answer(message, channels_list)

    async def removechannel_cmd(self, message):
        """
        Использование: .removechannel <ссылка на чат>
        Удаляет канал из списка.
        """
        chat_link = utils.get_args_raw(message)
        success, result = await self.remove_channel(chat_link)
        return await utils.answer(message, result) if success else await utils.answer(message, f"Ошибка: {result}")
