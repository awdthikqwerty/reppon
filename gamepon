import asyncio
from telethon.tl import types
from telethon.tl.patched import Message
from typing import List

# Добавьте эти строки в начало вашего кода, если их еще нет
# (или подключите необходимые модули для работы с hikka)
# import hikka
# from hikka import loader, utils

# ...

# Команда для добавления чата для рассылки
@loader.tds
class ChatPosterMod(loader.Module):
    """
    Модуль для отправки сообщений в несколько чатов
    """

    strings = {
        "add_chat_success": "<b>[ChatPoster]</b> Чат успешно добавлен.",
        "del_chat_success": "<b>[ChatPoster]</b> Чат успешно удален.",
        "list_chat_header": "<b>[ChatPoster]</b> Список чатов для рассылки:",
        "list_chat_item": "Чат {index}: {title} ({chat_id})",
        "list_post_header": "<b>[ChatPoster]</b> Список текстов для отправки:",
        "list_post_item": "Текст {index}: {text}",
    }

    def __init__(self):
        self.chats = []
        self.posts = []

    async def add_chat(self, chat: types.Chat):
        if chat not in self.chats:
            self.chats.append(chat)
            return True
        return False

    async def del_chat(self, chat: types.Chat):
        if chat in self.chats:
            self.chats.remove(chat)
            return True
        return False

    async def list_chat(self):
        result = [self.strings["list_chat_header"]]
        for index, chat in enumerate(self.chats, start=1):
            result.append(self.strings["list_chat_item"].format(index=index, title=chat.title, chat_id=chat.id))
        return result

    async def list_post(self):
        result = [self.strings["list_post_header"]]
        for index, post in enumerate(self.posts, start=1):
            result.append(self.strings["list_post_item"].format(index=index, text=post))
        return result

    async def add_post(self, text: str):
        self.posts.append(text)
        return True

    async def post(self, post_index: int, repeat_count: int, delay: int):
        if 1 <= post_index <= len(self.posts):
            for _ in range(repeat_count):
                for chat in self.chats:
                    await self.client.send_message(chat.id, self.posts[post_index - 1])
                    await asyncio.sleep(delay)
            return True
        return False

    async def cmd_add_chat(self, message: Message):
        """
        Использование: .add_chat <ссылка на чат>
        Добавляет чат для отправки сообщений.
        """
        chat = await utils.get_chat(message)
        if chat:
            if await self.add_chat(chat):
                return await utils.answer(message, self.strings["add_chat_success"])
            else:
                return await utils.answer(message, "<b>[ChatPoster]</b> Чат уже добавлен.")
        return await utils.answer(message, "<b>[ChatPoster]</b> Не удалось получить информацию о чате.")

    async def cmd_del_chat(self, message: Message):
        """
        Использование: .del_chat <ссылка на чат>
        Удаляет чат из списка для отправки сообщений.
        """
        chat = await utils.get_chat(message)
        if chat:
            if await self.del_chat(chat):
                return await utils.answer(message, self.strings["del_chat_success"])
            else:
                return await utils.answer(message, "<b>[ChatPoster]</b> Чат отсутствует в списке.")
        return await utils.answer(message, "<b>[ChatPoster]</b> Не удалось получить информацию о чате.")

    async def cmd_list_chat(self, message: Message):
        """
        Использование: .list_chat
        Показывает список чатов для отправки сообщений.
        """
        chat_list = await self.list_chat()
        return await utils.answer(message, "\n".join(chat_list))

    async def cmd_list_post(self, message: Message):
        """
        Использование: .list_post
        Показывает список текстов для отправки.
        """
        post_list = await self.list_post()
        return await utils.answer(message, "\n".join(post_list))

    async def cmd_add_post(self, message: Message):
        """
        Использование: .add_post <текст>
        Добавляет текст для отправки.
        """
        text = utils.get_args_raw(message)
        if text:
            if await self.add_post(text):
                return await utils.answer(message, "<b>[ChatPoster]</b> Текст успешно добавлен.")
            else:
                return await utils.answer(message, "<b>[ChatPoster]</b> Не удалось добавить текст.")
        return await utils.answer(message, "<b>[ChatPoster]</b> Пожалуйста, предоставьте текст для отправки.")

    async def cmd_post(self, message: Message):
        """
        Использование: .post <индекс текста> <количество повторов> <задержка>
        Отправляет сообщение из списка в указанные чаты.
        """
        args = utils.get_args(message)
        if len(args) == 3 and all(arg.isdigit() for arg in args):
            post_index, repeat_count, delay = map(int, args)
            if await self.post(post_index, repeat_count, delay):
                return await utils.answer(message, "<b>[ChatPoster]</b> Начата рассылка.")
            else:
                return await utils.answer(message, "<b>[ChatPoster]</b> Неверный индекс текста.")
        return await utils.answer(message, "<b>[ChatPoster]</b> Неверные аргументы. Использование: .post <индекс текста> <количество повторов> <задержка>")
